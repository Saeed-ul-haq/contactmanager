{"version":3,"sources":["components/contact/Contact.js","components/contact/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contact/AddContact.js","components/contact/EditContact.js","components/pages/About.js","components/pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Contact","state","showControl","showClickHandler","cntrl","setState","deleteContactHandler","props","delete","this","id","name","email","phone","className","onClick","icon","faSortDown","style","cursor","faTimes","color","float","to","faPencilAlt","marginRight","Component","Contacts","contacts","componentDidMount","a","Axios","get","res","data","newContact","filter","contact","contactList","map","ctct","key","Header","branding","href","faHome","faPlus","faQuestion","defaultProps","TextInputGroup","label","value","placeholder","type","error","onchange","htmlFor","classnames","onChange","AddContact","errors","ChangeHandler","e","target","submitHandler","preventDefault","post","then","console","log","onSubmit","EditContact","match","params","put","About","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ca383fa2.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport propTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes , faSortDown, faPencilAlt} from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Contact extends Component {\r\n\r\n    state = {\r\n\r\n        showControl: false\r\n    }\r\n\r\n    showClickHandler = () => {\r\n        const cntrl = this.state.showControl;\r\n        this.setState({showControl: !cntrl});\r\n    };\r\n\r\n    deleteContactHandler = () => {\r\n        this.props.delete();\r\n    }\r\n\r\n\r\n    render(){\r\n        const {id,name,email,phone} = this.props;\r\n        return (\r\n            <div className=\"card card-body mb-3\">\r\n                <h3>{name}  < FontAwesomeIcon onClick={this.showClickHandler} icon={faSortDown} \r\n                style={{cursor: 'pointer'}}/>\r\n                < FontAwesomeIcon icon={faTimes} style={{color: 'red',float: 'right',cursor: 'pointer'}} onClick={this.deleteContactHandler}/>\r\n                <Link to={'/contact/edit/'+ id} >\r\n                < FontAwesomeIcon icon={faPencilAlt} style={{color: 'black',float: 'right',marginRight: '1rem'}} /></Link>\r\n                 </h3>\r\n                \r\n                {this.state.showControl ? (\r\n                    <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">Email: {email}</li>\r\n                    <li className=\"list-group-item\"> Phone: {phone}</li>\r\n                </ul>\r\n                ) : null}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n    \r\n};\r\n\r\nContact.propTypes = {\r\n    name: propTypes.string.isRequired,\r\n    email: propTypes.string.isRequired,\r\n    phone: propTypes.string.isRequired,\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react'\r\nimport Contact from './Contact';\r\nimport Axios from 'axios';\r\n\r\n class Contacts extends Component {\r\n\r\n    state = {\r\n        contacts: []\r\n    };\r\n\r\n     componentDidMount = async () => {\r\n      const res = await  Axios.get('https://jsonplaceholder.typicode.com/users');\r\n        this.setState({\r\n            contacts: res.data\r\n        });\r\n    }\r\n\r\n    deleteContactHandler = async  (id) => {\r\n\r\n\r\n        await Axios.delete('https://jsonplaceholder.typicode.com/users/' + id);\r\n        const newContact = this.state.contacts.filter((contact) => contact.id !== id);\r\n         this.setState({contacts: newContact});\r\n        \r\n\r\n        \r\n    }\r\n    render() {\r\n\r\n        let contactList = '';\r\n        contactList = this.state.contacts.map((ctct) => {\r\n           return (\r\n            <Contact\r\n            key={ctct.id} \r\n            id={ctct.id}\r\n            name={ctct.name} \r\n            email={ctct.email} \r\n            phone={ctct.phone}\r\n            delete={() => this.deleteContactHandler(ctct.id)}\r\n            />\r\n           ) ;\r\n        })\r\n        return (\r\n            <div>\r\n                <h1 className=\"display-4 mb-2\">\r\n                    <span className=\"text-danger\">Contact</span> List\r\n                </h1>\r\n                {contactList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from 'react'\r\nimport propTypes from 'prop-types';\r\nimport {Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus , faQuestion,faHome } from '@fortawesome/free-solid-svg-icons';\r\n\r\n const Header = (props) => {\r\n     const {branding} = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {branding}\r\n                </a>\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/\" className=\"nav-link\"><FontAwesomeIcon icon = {faHome} /> HOME </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/contact/add\" className=\"nav-link\"> <FontAwesomeIcon icon={faPlus} /> Add Contact</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/about\" className=\"nav-link\"><FontAwesomeIcon icon={faQuestion} /> About</Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n\r\n        </nav>\r\n    );\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: 'MyApp'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: propTypes.string.isRequired\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport classnames from 'classnames'; \r\n\r\nconst TextInputGroup = (props) => {\r\n\r\n    const {label,name,value,placeholder,type,onchange,error} = props;\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name} >{label}</label>\r\n            <input \r\n            type={type} \r\n            className = {classnames('form-control form-contro-lg',{'is-invalid': error})}\r\n             \r\n            placeholder={placeholder} \r\n            name={name}\r\n            value={value}\r\n            onChange={props.onChange}/>\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from 'react'\r\n\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport Axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    // nameChangeHandler = (e) => {\r\n    //     this.setState({\r\n    //         name: e.target.value\r\n    //     });\r\n    // }\r\n\r\n    // phoneChangeHandler = (e) => {\r\n    //     this.setState({\r\n    //         phone: e.target.value\r\n    //     });\r\n    // }\r\n\r\n    ChangeHandler = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n    submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const {name,email,phone} = this.state;\r\n\r\n        if (name === '')\r\n        {\r\n            this.setState({\r\n                errors: { name: 'Name is Required'}\r\n            });\r\n            return ;\r\n        }\r\n        \r\n        if (phone === '')\r\n        {\r\n            this.setState({\r\n                errors: { phone: 'Phone is Required'}\r\n            });\r\n            return ;\r\n        }\r\n        if (email === '')\r\n        {\r\n            this.setState({\r\n                errors: { email: 'Email is Required'}\r\n            });\r\n            return ;\r\n        }\r\n        const newcontact = {\r\n            name,\r\n            \r\n        }\r\n        Axios.post('https://jsonplaceholder.typicode.com/users/'  )\r\n        .then(res => console.log(res));\r\n        console.log(this.state);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Add Contact</div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={this.submitHandler}>\r\n                        <TextInputGroup label=\"Name\"  name=\"name\"  value={this.state.name} placeholder=\"Enter Name\" type=\"text\" onChange={this.ChangeHandler} error={this.state.errors.name} />\r\n                        <TextInputGroup label=\"Phone\"  name=\"phone\"  value={this.state.phone} placeholder=\"Enter Phone\" type=\"text\" onChange={this.ChangeHandler}  error={this.state.errors.phone}/>\r\n                        <TextInputGroup label=\"Email\"  name=\"email\"  value={this.state.email} placeholder=\"Enter Email\" type=\"email\" onChange={this.ChangeHandler}  error={this.state.errors.email}/> \r\n                        \r\n                        <input type=\"submit\" className=\"btn btn-light btn-block\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddContact;\r\n","import React, { Component } from 'react'\r\n\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport Axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    componentDidMount =  async () => {\r\n        \r\n        \r\n        const {id} = this.props.match.params;\r\n\r\n       const res = await Axios.get('https://jsonplaceholder.typicode.com/users/' + id);\r\n        \r\n            this.setState({\r\n                name: res.data.name,\r\n                email: res.data.email,\r\n                phone: res.data.phone\r\n            });\r\n        \r\n        \r\n    };\r\n\r\n    \r\n\r\n    ChangeHandler = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n    submitHandler = async (e) => {\r\n        e.preventDefault();\r\n        const {name,email,phone} = this.state;\r\n\r\n        if (name === '')\r\n        {\r\n            this.setState({\r\n                errors: { name: 'Name is Required'}\r\n            });\r\n            return ;\r\n        }\r\n        \r\n        if (phone === '')\r\n        {\r\n            this.setState({\r\n                errors: { phone: 'Phone is Required'}\r\n            });\r\n            return ;\r\n        }\r\n        if (email === '')\r\n        {\r\n            this.setState({\r\n                errors: { email: 'Email is Required'}\r\n            });\r\n            return ;\r\n        }\r\n\r\n        const {id} = this.props.match.params;\r\n        const res = await Axios.put('https://jsonplaceholder.typicode.com/users/' + id,{name,phone,email});\r\n    \r\n\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Edit Contact</div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={this.submitHandler}>\r\n                        <TextInputGroup label=\"Name\"  name=\"name\"  value={this.state.name} placeholder=\"Enter Name\" type=\"text\" onChange={this.ChangeHandler} error={this.state.errors.name} />\r\n                        <TextInputGroup label=\"Phone\"  name=\"phone\"  value={this.state.phone} placeholder=\"Enter Phone\" type=\"text\" onChange={this.ChangeHandler}  error={this.state.errors.phone} />\r\n                        <TextInputGroup label=\"Email\"  name=\"email\"  value={this.state.email} placeholder=\"Enter Email\" type=\"email\" onChange={this.ChangeHandler}  error={this.state.errors.email} /> \r\n                        \r\n                        <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-light btn-block\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditContact;\r\n","import React from 'react'\r\n\r\nconst About = (props) => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4 mb-3\">Contact Manager</h1>\r\n            <p className=\"Lead\">Simple App to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n            {console.log(props)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react'\r\n\r\n const NotFound = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4 \">404 Page Not NotFound</h1>\r\n            <p className=\"Lead\">Sorry! That page does not exist.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Contact from './components/contact/Contact';\nimport Contacts from './components/contact/Contacts';\nimport Header from './components/layout/Header';\nimport AddContact from './components/contact/AddContact';\nimport EditContact from './components/contact/EditContact';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  render(){\n    return (\n      <HashRouter >\n      <div className=\"App\">\n        <Header branding=\"Contact Manager\" />\n        \n        <div className=\"container\">\n\n          <Switch>\n            <Route exact path=\"/\" component={Contacts} />\n            <Route path=\"/contact/add\" component={AddContact} />\n            <Route path=\"/about\" component={About} />\n            <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n            <Route component={NotFound}/>\n          </Switch>\n\n      \n        </div>\n\n      </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}